■ 딥러닝 개발 환경 구축 방법
1. 아나콘다 설치
2. 아나콘다 프롬프트 사용해서 파이썬가상환경(3.5버전) 생성
3. 생성한 파이썬가상환경에 접속 (명령어 : activate Tensorflow)
4. 텐서플로 설치 (명령어 : pip install tensorflow)
5. 파이참 설치 (개발 효율성을 높이기 위해 개발 툴 설치하는 것임)



■ 파이썬 버전
2.x <-> 3.x 두 버전대의 호환성이 안좋음. 이것이 파이썬의 가장 큰 단점중 하나



■ Virtualenv
파이썬 인터프리터의 독립적 환경(파이썬가상환경)을 제공하게 도와주는 라이브러리



■ Anaconda
아나콘다의 주된 의의(목적)는
1. 파이썬 + 패키지 배포판이다.
2. 패키지 관리 툴 (pip와 비슷한 역할)
3. 가상환경 구축 툴 (Virtualenv와 비슷한 역할)

즉, 이전에 하던것처럼 파이썬을 설치 후(즉, 파이썬 인터프리터를 설치) 필요한 패키지들을
따로 일일이 설치를 했던것과 달리 아나콘다를 설치하게 되면 파이썬 및
보통 필요로되는(데이터사이언스에 유용한 여러가지 라이브러리) 다양한
패키지까지 같이 포함되어 설치가 된다는 것이다.



■ Jupyter Notebook
파이썬을 웹에서 개발할 수 있는 환경임.
즉, 그냥 파이썬 IDE(Integrated Development Environment)라고 보면 된다.
IPython Notebook의 업그레이드 된 버전 즉, 그냥 이름만 바뀐 거임
버전업이 되면서



■ CPU vs GPU vs APU
CPU : 그냥 CPU 중앙처리장치
GPU : 그래픽카드에 탑재되는 CPU
APU : CPU + GPU
그러니까 즉, CPU가 좋아지는 화면 출력을 처리하는데 한계가 생겨
CPU에서 GPU라는 것이 따로 떨어져나와 그래픽카드에 탑재되어
이러한 이미지만 처리하는 프로세서로 작동함
허나 최근에는 다시 CPU와 GPU가 합쳐져서 APU라고 불림.
(매니아 대상으로 아직 GPU가 있긴 함)



■ GPGPU
GPU가 CPU보다 성능이 뛰어나짐.
이러한 성능이 뛰어난 GPU를 그래픽스 목적 외에 보다 범용적인 용도로
사용할 수 있도록 하자는 데에서 출발한 개념 GPU나 CPU같은 프로세서가 아니다.
하나의 개념